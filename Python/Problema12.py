# ========== Project Euler. Problem #12 =========

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
# number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# -----------------------------------------------

# Obtiene el n-ésimo número triangular
def nthTriangular(n):
    S = n*(n+1)//2
    return S

# Obtiene el número de divisores de un número n
def ListOfDivisors(n):
    L = []
    p = 2
    while n>1:
        if n%p == 0:
            L.append(p)
            n = n//p
        else:
            p+=1
        
        if p>int(n**0.5)+1:
            L.append(n)
            break
    return L

# Devuelve el número de divisores de un número
def NumOfDivisors(n):
    L = ListOfDivisors(n)
    D = {}
    for p in L:
        if p in D.keys():
            D[p] += 1
        else:
            D[p] = 1
    
    C = 1
    for p in D.keys():
        C *= (D[p]+1)
    
    return C



# Obtiene el primer número triangular con más de n divisores
def FirstTriangular(n):
    m = 1
    T = nthTriangular(m)
    while NumOfDivisors(T)<n:
        m+=1
        T = nthTriangular(m)
    return T

n = 500

print(f"El primer número triangular en tener más de {n} divisores {FirstTriangular(n)}")